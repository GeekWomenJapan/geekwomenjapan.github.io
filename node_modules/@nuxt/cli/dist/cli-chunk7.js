/*!
 * @nuxt/cli v2.5.1 (c) 2016-2019

 * - All the amazing contributors
 * Released under the MIT License.
 * Website: https://nuxtjs.org
*/
'use strict';

require('path');
require('consola');
require('esm');
require('exit');
const __chunk_2 = require('./cli-chunk2.js');
require('@nuxt/config');
require('@nuxt/utils');
require('chalk');
require('pretty-bytes');
require('std-env');
require('wrap-ansi');
require('boxen');
const __chunk_3 = require('./cli-chunk3.js');

const generate = {
  name: 'generate',
  description: 'Generate a static web application (server-rendered)',
  usage: 'generate <dir>',
  options: {
    ...__chunk_3.common,
    ...__chunk_3.locking,
    build: {
      type: 'boolean',
      default: true,
      description: 'Only generate pages for dynamic routes. Nuxt has to be built once before using this option'
    },
    devtools: {
      type: 'boolean',
      default: false,
      description: 'Enable Vue devtools',
      prepare(cmd, options, argv) {
        options.vue = options.vue || {};
        options.vue.config = options.vue.config || {};
        if (argv.devtools) {
          options.vue.config.devtools = true;
        }
      }
    },
    modern: {
      ...__chunk_3.common.modern,
      description: 'Generate app in modern build (modern mode can be only client)',
      prepare(cmd, options, argv) {
        if (__chunk_2.normalizeArg(argv.modern)) {
          options.modern = 'client';
        }
      }
    },
    'fail-on-error': {
      type: 'boolean',
      default: false,
      description: 'Exit with non-zero status code if there are errors when generating pages'
    }
  },
  async run(cmd) {
    const config = await cmd.getNuxtConfig({ dev: false });

    // Disable analyze if set by the nuxt config
    if (!config.build) {
      config.build = {};
    }
    config.build.analyze = false;

    const nuxt = await cmd.getNuxt(config);

    if (cmd.argv.lock) {
      await cmd.setLock(await __chunk_2.createLock({
        id: 'build',
        dir: nuxt.options.buildDir,
        root: config.rootDir
      }));

      nuxt.hook('build:done', async () => {
        await cmd.releaseLock();

        await cmd.setLock(await __chunk_2.createLock({
          id: 'generate',
          dir: nuxt.options.generate.dir,
          root: config.rootDir
        }));
      });
    }

    const generator = await cmd.getGenerator(nuxt);

    const { errors } = await generator.generate({
      init: true,
      build: cmd.argv.build
    });

    if (cmd.argv['fail-on-error'] && errors.length > 0) {
      throw new Error('Error generating pages, exiting with non-zero code')
    }
  }
};

exports.default = generate;
